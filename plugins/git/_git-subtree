#compdef git-subtree
#description Merge subtrees together and split repository into subtrees


(( $+functions[__git_any_repositories_or_references] )) ||
__git_any_repositories_or_references () {
  _alternative \
    'repositories::__git_any_repositories' \
    'references::__git_references'
}

_git-subtree () {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args

  # TODO: -P should only complete paths inside the current repository.
  _arguments -s -C \
    '(-q --quiet)'{-q,--quiet}'[suppress progress output]' \
    '-d[show debug messages]' \
    '*'{-P,--prefix=}'[the path to the subtree in the repository to manipulate]:directory:_directories' \
    ': :->command' \
    '*:: :->option-or-argument' && ret=0

  case $state in
    (command)
      declare -a commands

      commands=(
        add:'create the subtree by importing its contents from <commit> / <repository>@<ref>'
        merge:'merge recent changes from <commit> into the subtree'
        pull:'fetch <repository>@<ref> and merge recent changes into the subtree'
        push:'does a split and `git push` to <repository>@<ref>'
        split:'extract a new synthetic project history from a subtree')

      _describe -t commands command commands && ret=0
      ;;
    (option-or-argument)
      curcontext=${curcontext%:*}-$line[1]:

      case $line[1] in
        (add)
          _arguments -S \
            '(-q --quiet)'{-q,--quiet}'[suppress progress output]' \
            '(-m --message)'{-m,--message}'[use the given message as the commit message for the merge commit]' \
            '*'{-P,--prefix=}'[the path to the subtree in the repository to manipulate]:directory:_directories' \
            '--squash[import only a single commit from the subproject]' \
            ': :__git_any_repositories_or_references' \
            ':: :__git_ref_specs' && ret=0
          ;;
        (merge)
          _arguments -S \
            '(-q --quiet)'{-q,--quiet}'[suppress progress output]' \
            '*'{-P,--prefix=}'[the path to the subtree in the repository to manipulate]:_directories' \
            '(-m --message)'{-m,--message}'[use the given message as the commit message for the merge commit]' \
            '--squash[import only a single commit from the subproject]' \
            ': :__git_references' && ret=0
          ;;
        (pull)
          _arguments -S \
            '(-q --quiet)'{-q,--quiet}'[suppress progress output]' \
            '*'{-P,--prefix=}'[the path to the subtree in the repository to manipulate]:_directories' \
            '(-m --message)'{-m,--message}'[use the given message as the commit message for the merge commit]' \
            '--squash[import only a single commit from the subproject]' \
            ': :__git_any_repositories' \
            ':: :__git_ref_specs' && ret=0
          ;;
        (push)
          _arguments -S \
            '(-q --quiet)'{-q,--quiet}'[suppress progress output]' \
            '*'{-P,--prefix=}'[the path to the subtree in the repository to manipulate]:_directories' \
            '(-m --message)'{-m,--message}'[use the given message as the commit message for the merge commit]' \
            ': :__git_any_repositories' \
            ':: :__git_ref_specs' && ret=0
          ;;
        (split)
          _arguments -S \
            '(-q --quiet)'{-q,--quiet}'[suppress progress output]' \
            '*'{-P,--prefix=}'[the path to the subtree in the repository to manipulate]:_directories' \
            '(-m --message)'{-m,--message}'[use the given message as the commit message for the merge commit]' \
            '*: :__git_references' && ret=0
          ;;
        (*)
          _nothing
          ;;
      esac
      ;;
  esac

  return ret
}
