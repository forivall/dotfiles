#!/usr/bin/env zsh

# ;& syntax uses bash >= 4.0; zsh probably more up to date
autoload -U colors  && colors

() {
  local lc=$'\e[' rc=m
  typeset -Hg reset_color bold_color
  faint_color="$lc${color[faint]}$rc"
}

color_print() {
  ONE=$1
  shift
  print -Pf "$fg[blue]%-7s $reset_color %s\n" "$ONE" "$*"
}

OPTS_SPEC="\
git ls-recent [<options>] <args>...
--
h,help      show the help
n,count=    show this many commits [default=10]
d,date=     use date format [default=short]
relative    use relative date format
human       use human-local date format
access      sort by recently checked out [default]
c,commit    sort by commit date
u,author    sort by commit author date
e,creation  sort by branch creation date
r,remote?   show remote branches (sort by commit)
a,all       show all (sort by commit)
t,tags      show recent tags
b,branches  show recent branches (default)
"
eval "$(echo "$OPTS_SPEC" | git rev-parse --parseopt --stuck-long -- "$@" || echo exit $?)"

NUM=10
by_commit=false
by_creation=false
sort=creatordate
sort2=
pattern=refs/heads/
date=short

index=0
for arg in $@; do
  index=$((index+1))
  case "$arg" in
    --count=*) NUM="${arg#--count=}" ;;
    --author) sort=authordate ;&
    --commit) by_commit=true ;;
    --creation) by_creation=true ;;
    --date=*) date="${arg#--date=}" ;;
    --human) date=human-local ;;
    --relative) date=relative ;;
    --remote) by_commit=true; pattern=refs/remotes/origin ;;
    --remote=*) by_commit=true; pattern=refs/remotes/${arg#--remote=} ;;
    --all) by_commit=true; pattern= ;;
    --tags) by_commit=true; pattern=refs/tags; sort2=taggerdate ;;
    --) break; ;;
  esac
done

if $by_commit; then
  #for k in `git branch|perl -pe s/^..//`;do echo -e `git show --pretty=format:"%Cgreen%ci %Cblue%cr%Creset" $k|head -n 1`\\t$k;done|sort -r
  git for-each-ref --sort=-$sort --format="%(color:blue)%(${sort}:${date})%(color:reset) %(refname:short) %(color:dim)%(color:magenta)%(authorname)%(taggername)%(color:reset)" --count=$NUM $pattern
  exit
fi

if $by_creation; then
  git for-each-ref --format=%\(refname:short\) refs/heads/ | while read branchref; do
    reflogunix=$(git --no-pager reflog show $branchref --date=unix --grep-reflog=Created | sed -E 's/^([a-f0-9]+ )*([^@: ]*)@\{([0-9\-]*)\}+: *(branch: Created from (.*))?/\3/')
    reflogformat=$(git --no-pager reflog show --color $branchref --date=${date} --grep-reflog=Created | sed -E 's/^([^ ]+ )*([^@: ]*)@\{([^\}]*)\}+: *(branch: Created (from [^H][^E]([^A]([^D].*))?))?.*/\x1b\['${color[blue]}'m\3\x1b\['${color[none]}'m \2 \x1b\['${color[faint]}'m\5\x1b\['${color[none]}'m/')
    echo $reflogunix $reflogformat
  done |
    sort -rg | head -n $NUM |
    cut -d' ' -f2- |
    # awk '{printf "%s %s",$2,$3} ; $4 != "HEAD" { printf " ← %s",$4 }; {printf "|%s\n",$3}' |
    cat
    # while read line; do entries+=($line); done
  exit
fi

# default is by access
# --checkout
# -k

# print the branch name of the most recent unique 10 checkouts
_i=0
(
errs=0
for i in {1..99} ; do
    branchname=$(git rev-parse --symbolic-full-name @{-$i} 2>/dev/null)
    if [[ $branchname == "@{-$i}" || -z "$branchname" ]] ; then continue; fi
    # printf '%-7s ' @{-$i}
    echo @{-$i} ${branchname#refs/heads/}
done) | awk '!x[$2]++' | while read -A entry ; do
    # if (( $_i == 0 )) ; then echo -n - ; else echo -n $_i ; fi ; echo -n ' '
    # echo "$branchname"

    reflogdate=$(git --no-pager reflog show ${entry[1]} --date=${date} -n1 --format=%gD)
    print -Pf "${fg[blue]}%-6s$reset_color ${faint_color}%12s$reset_color %s\n" "${entry[1]}" "${${reflogdate#*@{}%\}}" "${entry[2,-1]}"
    _i=$(( $_i + 1 ))
    if (( $_i >= $NUM )) ; then break; fi
done

# TODO: convert to python, use python-urwid. (menu, up/down to select)
#       or node, see what yeoman uses.


