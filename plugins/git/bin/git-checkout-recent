#!/usr/bin/env zsh

# set -euo pipefail

__plugin_dirname=${0:a:h:h}

autoload -U colors  && colors

OPTS_SPEC="\
git checkout-recent [<options>] <args>...
--
h,help      show the help
n,count=    show this many commits [default=10]
d,date=     use date format [default=short-local]
relative    use relative date format
human       use human-local date format
access      sort by recently checked out [default]
c,commit    sort by commit date
u,author    sort by commit author date
e,creation  sort by branch creation date
r,remote?   show remote branches (sort by commit)
a,all       show all (sort by commit)
t,tags      show recent tags
b,branches  show recent branches (default)
"
eval "$(echo "$OPTS_SPEC" | git rev-parse --parseopt --stuck-long -- "$@" || echo exit $?)"

NUM=10
by_commit=false
by_creation=false
sort=creatordate
sort2=
pattern=refs/heads/
date=short-local

index=0
for arg in $@; do
  index=$((index+1))
  case "$arg" in
    --count=*) NUM="${arg#--count=}" ;;
    --author) sort=authordate ;&
    --commit) by_commit=true ;;
    --creation) by_creation=true ;;
    --date=*) date="${arg#--date=}" ;;
    --human) date=human-local ;;
    --relative) date=relative ;;
    --remote) by_commit=true; pattern=refs/remotes/origin ;;
    --remote=*) by_commit=true; pattern=refs/remotes/${arg#--remote=} ;;
    --all) by_commit=true; pattern= ;;
    --tags) by_commit=true; pattern=refs/tags; sort2=taggerdate ;;
    --) break; ;;
  esac
done

entries=()

if $by_commit; then
  #for k in `git branch|perl -pe s/^..//`;do echo -e `git show --pretty=format:"%Cgreen%ci %Cblue%cr%Creset" $k|head -n 1`\\t$k;done|sort -r
  git for-each-ref --sort=-$sort --format="%(${sort}:${date}) %(refname:short)|%(refname:short)" --count=$NUM $pattern |
  while read line; do entries+=($line); done
elif $by_creation; then
  git for-each-ref --format=%\(refname:short\) refs/heads/ | while read branchref; do
    # TODO: use format instead of sed hacking
    reflogunix=$(git --no-pager reflog show $branchref --date=unix --grep-reflog=Created | sed -E 's/^([a-f0-9]+ )*([^@: ]*)@\{([0-9\-]*)\}+: *(branch: Created from (.*))?/\3/')
    reflogformat=$(git --no-pager reflog show $branchref --date=${date} --grep-reflog=Created | sed -E 's/^([a-f0-9]+ )*([^@: ]*)@\{([^\}]*)\}+: *(branch: Created (from [^H][^E]([^A]([^D].*)?)?))?.*/\3 \2 \5|\2/')
    echo $reflogunix $reflogformat
  done |
    sort -rg | head -n $NUM |
    cut -d' ' -f2- |
    # awk '{printf "%s %s",$2,$3} ; $4 != "HEAD" { printf " ← %s",$4 }; {printf "|%s\n",$3}' |
    while read line; do entries+=($line); done
else
  _i=0
  (for i in {1..99} ; do
    branchname=$(git rev-parse --symbolic-full-name @{-$i} 2>/dev/null)
    if [[ $branchname == "@{-$i}" || -z "$branchname" ]] ; then continue; fi
    # printf '%-7s ' @{-$i}
    echo @{-$i} ${branchname#refs/heads/}
  done) | awk '!x[$2]++' | while read -A entry ; do
    reflogdate=$(git --no-pager reflog show ${entry[1]} --date=${date} -n1 --format=%gD)
    entries+=("${entry[1]} ${${reflogdate#*@{}%\}} ${entry[2]}|${entry[1]}")
    _i=$(( $_i + 1 ))
    if (( $_i >= $NUM )) ; then break; fi
  done
fi

term_menu_options=(
  --no-preview-border
  --preview-size 0.6
  --preview "$__plugin_dirname/__git-checkoutb-preview {}"
)

simple-term-menu $term_menu_options "${entries[@]}" && i=0 || i=$?
if (( $i == 0 )) ; then exit; fi

branch=${entries[i]#*|}
echo '>' git checkout $branch
git checkout $branch
