#!/usr/bin/env zsh

jest-toplevel() {
  local gitPrefix="$(git rev-parse --show-prefix)"
  local noTestPatterns=true
  local dashArg=false
  local jestArgs=()
  local RESOLVED
  for arg in $@; do
    if [[ $arg != -* ]]; then
      if $dashArg; then
        jestArgs+=($arg)
        dashArg=false
      else
        resolve_path $gitPrefix $arg
        jestArgs+=($RESOLVED)
      fi
      noTestPatterns=false
    else
      jestArgs+=($arg)
      if [[
        $arg != (-h|-b|-e|-o|-f|-i|-u) &&
        $arg != (--(no-|)(help|version|all|automock|bail|cache|changedFilesWithAncestor|ci|clearCache|clearMocks|collectCoverage|color(s|))) &&
        $arg != (--(no-|)(coverage|detectLeaks|detectOpenHandles|errorOnDeprecated|expand|findRelatedTests|forceExit|lastCommit|listTests)) &&
        $arg != (--(no-|)(logHeapUsage|noStackTrace|notify|onlyChanged|onlyFailures|passWithNoTests|resetMocks|resetModules|restoreMocks)) &&
        $arg != (--(no-|)(runInBand|showConfig|silent|skipFilter|testLocationInResults|updateSnapshot|useStderr|verbose|watch|watchAll|watchman))
      ]]; then
        echo dasharg: $arg 
        dashArg=true
      fi
    fi
  done
  local testPathPattern=()
  $noTestPatterns && jestArgs=($gitPrefix $jestArgs)
  npx --prefix=$PWD jest --config "$(git rev-parse --show-cdup)jest.config.js" "${jestArgs[@]}"
}

resolve_path() {
  setopt extendedglob

  local prefix=$1
  local target=$2
  local MATCH
  while true; do
    MATCH=
    target=${target#(#m)./}
    if [[ -n "$MATCH" ]]; then continue; fi;
    MATCH=
    target=${target#(#m)../}
    if [[ -z "$MATCH" ]]; then break; fi;
    prefix=${prefix:h}/
  done

  RESOLVED=$prefix$target
}

if [[ $ZSH_EVAL_CONTEXT == toplevel ]]; then
  jest-toplevel "$@"
fi
