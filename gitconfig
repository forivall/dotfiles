[user]
	name =
	useConfigOnly = true
	email =
[core]
	#autocrlf = input
	# pager = delta --dark --theme base16
	# pager = less +X -x2 -R
	# pager = most
	pager = moar --no-linenumbers
	excludesfile = ~/.gitignore
	trustctime = false
	editor = vim
	# trustctime = false
[diff]
	renames = copies
	tool = vscode
	# colorMoved = default
[difftool]
	prompt = false
[interactive]
	diffFilter = delta --color-only
[delta]
	navigate = true  # use n and N to move between diff sections
	minus-style = syntax auto
	syntax-theme = base16-tomorrow-night
	# hyperlinks = true
[alias]
	aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /' | sort
	br = branch
	ci = commit
	cie = commit-edit
	co = checkout
	cop = checkoutp

	st = status -b -s
	stat = status -b -s

	# --pretty=format:"%H%x20%an%x09%ad%x09%s"
	ahead = log --name-status --pretty=onemore --graph HEAD ^origin/HEAD
	ahead-root = !git --no-pager log --oneline HEAD ^origin/HEAD
	ahead2 = log --name-status --abbrev-commit --pretty=oneline --graph --decorate HEAD ^origin/HEAD
	exclude = "!f() { for p in \"$@\" ; do echo \"$GIT_PREFIX$p\" >> $GIT_DIR/info/exclude ; done; }; f"
	delta = -c core.pager=deltaw diff
	deltac = -c core.pager=deltaw diff --cached
	deltas = -c core.pager=deltaw show
	diffc = diff --cached
	diffd = -c core.pager=deltaw diff
	diffcd = -c core.pager=deltaw diff --cached
	showd = -c core.pager=deltaw show
	last = -c pager.show=off show --oneline --name-status --decorate
	last2 = last --name-status --pretty=twomore
	l = log --pretty=oneline --abbrev-commit --decorate --graph
	lu = log --pretty=oneline --abbrev-commit --decorate --graph HEAD @{u}
	lup = "!git log --pretty=oneline --abbrev-commit --decorate --graph HEAD @{u} $(git rev-parse --symbolic --glob=\"$(git rev-parse --symbolic-full-name @{u})*\")"
	lus = log --pretty=oneline --abbrev-commit --decorate --graph --simplify-by-decoration HEAD @{u}
	li = log --pretty=oneline --abbrev-commit --decorate --graph HEAD @{u}  # <kbd>i</kbd> is much easier to hit than <kbd>u</kbd>
	la = log --pretty=oneline --abbrev-commit --decorate --graph --exclude=refs/stash --exclude=refs/remotes/*/archive/** --exclude=refs/tags/archive/** --all
	las = log --pretty=oneline --abbrev-commit --decorate --graph --exclude=refs/stash --exclude=refs/remotes/*/archive/** --exclude=refs/tags/archive/** --all --simplify-by-decoration
	laa = log --pretty=oneline --abbrev-commit --decorate --graph --all
	lo = log --pretty=oneline --abbrev-commit --decorate --graph --remotes=origin --branches
	l2 = log --pretty=onemore --decorate --graph --no-notes
	l3 = log --pretty=twoline --decorate --graph --date=local
	lg = log --name-status --pretty=oneline --abbrev-commit --decorate --graph
	lga = log --name-status --pretty=oneline --abbrev-commit --decorate --graph --all
	lg2 = log --name-status --pretty=onemore --graph --no-notes
	lg3 = log --name-status --pretty=twoline --graph --date=local
	lgp = log -p --pretty=onemore --graph
  logp2 = logp --pretty=concise
  show2 = show --pretty=concise
  showd2 = showd --pretty=concise
	ll = log --pretty=oneline --abbrev-commit --decorate --graph --branches=*
	branches = branch --list
	branches-with-upstreams = "!git rev-parse --symbolic --branches | while read branch; do echo $branch; up=$(git rev-parse --symbolic $branch@{u} 2>/dev/null) && echo $up; done"
	llu = "!git log --pretty=oneline --abbrev-commit --decorate --graph $(git branches-with-upstreams)"
	llus = "!git log --pretty=oneline --abbrev-commit --decorate --graph --simplify-by-decoration  $(git branches-with-upstreams)"
	shlg = log --name-status --pretty=raw --abbrev-commit --decorate --graph
	tracking-status = for-each-ref --format='%(refname:short) <- %(upstream:short)' refs/heads
	ignore-for-now = update-index --assume-unchanged
	update-branch-upstream = "!f() { branch=$1; shift; git update-ref \"refs/heads/$branch\" \"$branch@{u}\" $@; }; f"
	push-new-branch = "!f() { branch=\"$(git rev-parse --symbolic-full-name HEAD)\"; branch=${branch#refs/heads/}; if [[ \"$#\" -eq 0 ]]; then upstream=origin; else upstream=$1; shift; fi; git push -u \"$upstream\" \"$branch\" \"$@\"; }; f"
	reset-upstream = reset @{u}
	root = rev-parse --show-toplevel
	tag-column = !git tag "$@" | column
	# useful to force make to rebuild changed files; just `| xargs touch`
	show-files-only = show --pretty="format:" --name-only
	serve = daemon --export-all --base-path=. --verbose
	commit-edit = "!git commit --edit --file \"$(git rev-parse --git-dir)/COMMIT_EDITMSG\""
	env = "!env"
	checkout-pull-detach = "!f() { git checkout \"$@\" && git pull && git detach-head; }; f"
	detach-head = checkout --detach HEAD
	wt = "worktree"
	worktree-dirs = "!git worktree list --porcelain | rg '^worktree ' | sd '^worktree ' ''"
	worktree-main = "!git worktree list --porcelain | head -n1 | sd '^worktree ' ''"
	worktree-ls = worktree list
	worktree-mv = worktree move
	worktree-rm = worktree remove
	worktree-cd = "worktree cd"
	# looks like ripgrep
	grep-pretty = "grep --break --heading"
	rg = "grep --break --heading"

	# legit
	# branches = !legit branches
	# brs = !legit branches
	# graft = !legit graft \"$@\"
	# harvest = !legit harvest \"$@\"
	# publish = !legit publish \"$@\"
	# sprout = !legit sprout \"$@\"
	# switch = !legit switch \"$@\"
	# sync = !legit sync \"$@\"
	# unpublish = !legit unpublish \"$@\"

	exec = "!exec "

	# aliases for custom commands
	sm = subl-modified
	sp = subl-projects
	unstage = reset HEAD --
	dc = diff --cached
	amend = commit --amend --no-edit
	reword = commit --amend
	cob = checkout-branch
	checkout-branch = checkout
	unresolve = checkout --conflict=merge
	config-user = "!git config --local user.name \"$1\" && git config --local user.email \"$2\" && :"
	# for ease of use, add a `git-config-signing` in ~/.local/bin with the key id as default
	config-signing = "!git config --local user.signingkey \"$1\" && git config --local commit.gpgSign true && :"

	archive-untracked-files = !git-archive-untracked-files
	branch-archive = !git-branch-archive
	changed-lines = !git-changed-lines
	cleanup-merged = !git-cleanup-merged
	file-size-diff = !git-file-size-diff
	find-blob = !git-find-blob
	has-changes = !git-has-changes
	resolve-conflicts = !git-resolve-conflicts

[color]
	# diff = always
	grep = auto
	interactive = always
	status = always
	ui = auto
	branch = auto
	diff = auto
# [color "branch"]
# 	current = yellow reverse
# 	local = yellow
# 	remote = green
# [color "diff"]
# 	meta = red bold
# 	frag = cyan bold
# 	old = red
# 	new = green
[color "status"]
	# added = green
	# changed = green
	untracked = magenta
[color "grep"]
	linenumber="green"
	filename="magenta"

[grep]
	lineNumber = true
[pager]
	branch = false
	ahead = less
	last = false
	ll = true
	ls-files = false
[pretty]
	concise = "format:%C(yellow)%H%C(auto)%d%C(magenta)%n%an <%ae>%Creset%nA: %C(blue)%aD%Creset, C: %C(blue)%cD%Creset%n%n%-s%n%Creset%n%-b"
	onemore = "format:%C(yellow)%h%C(auto)%d%C(magenta) %an %Creset%C(blue)%ar%Creset %s"
	twomore = "format:%C(yellow)%h%C(auto)%d%C(magenta) %an %Creset%C(blue)%ar%Creset%n%-s"
	twoline = "format:%C(yellow)%h%C(auto)%d%C(magenta) %aE %Creset%C(blue)%ad%C(green)%gn%Creset %n%s"
[giggle]
	file-view-vpane-position = 807
	history-view-vpane-position = 216
	main-window-geometry = 1265x1022+653+27
	main-window-maximized = false
	main-window-view = HistoryView
	show-graph = true
[merge]
	#tool = diffuse_windows
	#tool = diffuse_custom
	tool = smerge
	# tool = meld
	# tool = meld_merged
	# conflictstyle = diff3
[rerere]
	enabled = 1
[mergetool "diffuse_custom"]
	cmd = /usr/bin/env diffuse \"$LOCAL\" \"$MERGED\" \"$REMOTE\"
	#"
[mergetool "diffuse_base"]
	cmd = /usr/bin/env diffuse \"$LOCAL\" \"$BASE\" \"$REMOTE\"
	#"
[mergetool "meld_merged"]
	cmd = /usr/bin/env meld \"$LOCAL\" \"$MERGED\" \"$REMOTE\"
	#"
[mergetool "diffuse_windows"]
		cmd = \"C:\\Program Files (x86)\\Diffuse\\diffusew.exe\" \"$LOCAL\" \"$MERGED\" \"$REMOTE\"
		#"
[mergetool "diffuse_cygwindows"]
		cmd = \"/cygdrive/c/Program Files (x86)/Diffuse/diffusew.exe\" \"$LOCAL\" \"$MERGED\" \"$REMOTE\"
		#"
[mergetool "meld_windows"]
		cmd = \"C:\\Program Files (x86)\\Meld\\meld\" \"$LOCAL\" \"$MERGED\" \"$REMOTE\"
[github]
	user = forivall
# [push]
# 	default = simple
[push]
	default = simple
	autoSetupRemote = true
[hub]
	protocol = https
[url "git://anongit.kde.org/"]
	insteadOf = kde:
# [url "ssh://git@git.kde.org/"]
# 	pushInsteadOf = kde:
[url "git@git.kde.org:"]
	pushInsteadOf = kde:
[url "https://github.com/"]
	insteadOf = hub:
[url "git@github.com:"]
		pushInsteadOf = hub:
[url "https://gitlab.com/"]
	insteadOf = lab:
[url "git@gitlab.com:"]
	pushInsteadOf = lab:
[credential]
	helper = cache
	helper = /usr/local/share/gcm-core/git-credential-manager
[mergetool]
	keeptemporaries = false
	keepbackups = false
	prompt = false
	trustexitcode = false
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	required = true
	process = git-lfs filter-process
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path =
[difftool "vscode"]
	cmd = code --wait \"$LOCAL\" \"$REMOTE\" --diff
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[merge "npm-merge-driver"]
	name = automatically merge npm lockfiles
	driver = npx npm-merge-driver merge %A %O %B %P
[mergetool "vscode"]
	cmd = code --wait --merge \"$REMOTE\" \"$LOCAL\" \"$BASE\" \"$MERGED\"
[mergetool "smerge"]
	cmd = smerge mergetool \"$REMOTE\" \"$LOCAL\" \"$BASE\" -o \"$MERGED\"
[commit]
	# template = /Users/emilyklassen/.stCommitMsg
[pull]
	ff = only
[init]
	defaultBranch = main
[extensions]
  worktreeConfig = true
[credential "https://dev.azure.com"]
	useHttpPath = true
[sequence]
	editor = interactive-rebase-tool
[rebase]
	autoSquash = true
	updateRefs = true
[gui]
	editor = vscode
